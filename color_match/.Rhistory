thisMat=matrix(c(1,0,0,0,2,0,0,0,0),byrow = TRUE)
View(thisMat)
View(thisMat)
thisMat=matrix(c(1,0,0,0,2,0,0,0,0),3,3,byrow = TRUE)
View(thisMat)
thisPinv=ginv(thisMat)
help(ginv)
help(inv)
install.packages('pracma')
thisMat=matrix(c(1,0,0,0,2,0,0,0,0),3,3,byrow = TRUE)
thisPinv=ginv(thisMat)
help( pracma)
library( pracma)
thisMat=matrix(c(1,0,0,0,2,0,0,0,0),3,3,byrow = TRUE)
thisPinv=ginv(thisMat)
help(ginv)
help( pracma)
help(pinv)
thisMat=matrix(c(1,0,0,0,2,0,0,0,0),3,3,byrow = TRUE)
thisPinv=pinv(thisMat)
View(thisPinv)
View(thisPinv)
px=c(0,0)
py=c(10,10)
pointsMat=matrix(c(1,6,3,7,4,3,7,7,8,2,9,5),ncol = 2,byrow = TRUE)
rm(ls())
help(rm)
rm(list=ls())
rm(list=ls())
px=c(0,0)
py=c(10,10)
pointsMat=matrix(c(1,6,3,7,4,3,7,7,8,2,9,5),ncol = 2,byrow = TRUE)
View(pointsMat)
pointsSelected=matrix(c(0,0,10,10,c(rep(0,12,1))))
View(pointsSelected)
View(pointsSelected)
pointsSelected=matrix(c(0,0,10,10,c(rep(0,1,12))))
View(pointsSelected)
pointsSelected=matrix(c(0,0,10,10,c(rep(0,1,12))),ncol=2,byrow=TRUE)
View(pointsSelected)
install.packages("formatR")
library(formatR)
# tidy_eval("file path")
tidy_eval(""C:/Users/PC_name/Desktop/myfile.R"")
help(formatR)
help((formatR))
tidy_eval
rm(list=ls())
pointsSelected=matrix(c(0,0,10,10,c(rep(0,1,12))),ncol=2,byrow=TRUE)
pointsMat=matrix(c(1,6,3,7,4,3,7,7,8,2,9,5),ncol = 2,byrow = TRUE)
for roundIdx in 1:6
{
thisMaxDist=0
for nodeidx in 1:6
{
thisMinDist = 9999
for pointsSelectedIdx in 1:8
{
thisDist=sum((pointsMat(nodeIdx,)-pointsSelected(pointsSelectedIdx,))^2)
if(thisDist<thisMinDist)
thisMinDist<-thisDist
}
if(thisMinDist>thisMaxDist)
{
pointIdxChoice<-nodeIdx
thisMaxDist<- thisMinDist
}
}
print(paste('Point ',pointIdxChoice,' is picked in round ',roundIdx))
pointsSelected(roundIdx+2, )=pointsMat(pointIdxChoice, )
pointsMat(pointIdxChoice, )=c(0,0)
}
rm(list=ls())
pointsSelected=matrix(c(0,0,10,10,c(rep(0,1,12))),ncol=2,byrow=TRUE)
pointsMat=matrix(c(1,6,3,7,4,3,7,7,8,2,9,5),ncol = 2,byrow = TRUE)
rm(list=ls())
pointsSelected=matrix(c(0,0,10,10,c(rep(0,1,12))),ncol=2,byrow=TRUE)
pointsMat=matrix(c(1,6,3,7,4,3,7,7,8,2,9,5),ncol = 2,byrow = TRUE)
for roundIdx in 1:6
{
thisMaxDist=0
for nodeidx in 1:6
{
thisMinDist = 9999
for pointsSelectedIdx in 1:8
{
thisDist=sum((pointsMat(nodeIdx,)-pointsSelected(pointsSelectedIdx,))^2)
if(thisDist<thisMinDist)
thisMinDist<-thisDist
}
if(thisMinDist>thisMaxDist)
{
pointIdxChoice<-nodeIdx
thisMaxDist<- thisMinDist
}
}
print(paste('Point ',pointIdxChoice,' is picked in round ',roundIdx))
pointsSelected(roundIdx+2, )=pointsMat(pointIdxChoice, )
pointsMat(pointIdxChoice, )=c(0,0)
}
debugSource('D:/codes/R/MMD5B3.R')
rm(list=ls())
pointsSelected=matrix(c(0,0,10,10,c(rep(0,1,12))),ncol=2,byrow=TRUE)
pointsMat=matrix(c(1,6,3,7,4,3,7,7,8,2,9,5),ncol = 2,byrow = TRUE)
for roundIdx in 1:6
{
thisMaxDist=0
for nodeidx in 1:6
{
thisMinDist = 9999
for pointsSelectedIdx in 1:8
{
thisDist=sum((pointsMat(nodeIdx,)-pointsSelected(pointsSelectedIdx,))^2)
if(thisDist<thisMinDist)
thisMinDist<-thisDist
}
if(thisMinDist>thisMaxDist)
{
pointIdxChoice<-nodeIdx
thisMaxDist<- thisMinDist
}
}
print(paste('Point ',pointIdxChoice,' is picked in round ',roundIdx))
pointsSelected(roundIdx+2, )=pointsMat(pointIdxChoice, )
pointsMat(pointIdxChoice, )=c(0,0)
}
debugSource('D:/codes/R/MMD5B3.R')
debugSource('D:/codes/R/MMD5B3.R')
debugSource('D:/codes/R/MMD5B3.R')
debugSource('D:/codes/R/MMD5B3.R')
rm(list=ls())
pointsSelected=matrix(c(0,0,10,10,c(rep(0,1,12))),ncol=2,byrow=TRUE)
pointsMat=matrix(c(1,6,3,7,4,3,7,7,8,2,9,5),ncol = 2,byrow = TRUE)
for(roundIdx in 1:6)
{
thisMaxDist=0
for (nodeIdx in 1:6)
{
thisMinDist = 9999
for (pointsSelectedIdx in 1:8)
{
thisDist=sum((pointsMat[nodeIdx,]-pointsSelected[pointsSelectedIdx,])^2)
if(thisDist<thisMinDist)
thisMinDist<-thisDist
}
if(thisMinDist>thisMaxDist)
{
pointIdxChoice<-nodeIdx
thisMaxDist<- thisMinDist
}
}
print(paste('Point ',pointIdxChoice,' is picked in round ',roundIdx))
pointsSelected[roundIdx+2, ]=pointsMat[pointIdxChoice, ]
pointsMat(pointIdxChoice, )=c(0,0)
}
rm(list=ls())
pointsSelected=matrix(c(0,0,10,10,c(rep(0,1,12))),ncol=2,byrow=TRUE)
pointsMat=matrix(c(1,6,3,7,4,3,7,7,8,2,9,5),ncol = 2,byrow = TRUE)
for(roundIdx in 1:6)
{
thisMaxDist=0
for (nodeIdx in 1:6)
{
thisMinDist = 9999
for (pointsSelectedIdx in 1:8)
{
thisDist=sum((pointsMat[nodeIdx,]-pointsSelected[pointsSelectedIdx,])^2)
if(thisDist<thisMinDist)
thisMinDist<-thisDist
}
if(thisMinDist>thisMaxDist)
{
pointIdxChoice<-nodeIdx
thisMaxDist<- thisMinDist
}
}
print(paste('Point ',pointIdxChoice,' is picked in round ',roundIdx))
pointsSelected[roundIdx+2, ]<-pointsMat[pointIdxChoice, ]
pointsMat[pointIdxChoice, ]=c(0,0)
}
install.package('jpeg')
install.packages('jpeg')
library(jpeg)
get help library(help = jpeg)
library(help = jpeg)
FILEROOT='D:/kaggle/Diabetic/train/'
filename=paste(FILEROOT,'10_left.jpeg')
readJPEG(filename)
filename=paste(FILEROOT,'x10_left.jpeg')
filename
filename=paste('D:/kaggle/Diabetic/train/x10_left.jpeg')
filename
readJPEG(filename)
x=readJPEG(filename)
help(paste)
filename=paste(FILEROOT,'x10_left.jpeg',sep=NULL)
filename=paste(FILEROOT,'x10_left.jpeg',sep='')
filename
readJPEG(filename)
x=readJPEG(filename)
help(fft)
help(fft2)
xFFT=abs(fft(x))
image(xFFT)
x=readJPEG(filename,native = TRUE)
filename=paste(FILEROOT,'10_left.jpeg',sep='')
x=readJPEG(filename,native = TRUE)
xFFT=abs(fft(x))
image(xFFT)
bcg=read.table("D:/15_03_03_20_27_47_c0.txt")
plot(bcg)
View(bcg)
bcg=read.table("D:/15_03_03_20_42_34_c1.txt")
View(bcg)
bcg=read.table("D:/15_03_03_20_42_34_c0.txt")
bcg[7000]
bcg(7000)
bcg[7000,1]
bcg[7001,1]
bcg[7002,1]
max(bcg)
min(bcg)
bcg=read.table("D:/15_03_03_20_42_34_c1.txt")
max(bcg)
min(bcg)
View(bcg)
plot(bcg)
help(plot)
plot(bcg)
plot(bcg[15000:17000,1])
plot(bcg[15000:30000,1])
plot(bcg[15000:40000,1])
help(jpeg)
library(jpeg)
FILEROOT='D:/kaggle/Diabetic/train/'
filename=paste(FILEROOT,'10_left.jpeg',sep='')
x=readJPEG(filename,native = TRUE)
help(size)
size(x)
x(1,1)
x[1,1]
x[1,2]
x
print(x)
x[2000,:]
x[2000,]
help(unit8)
unit8
unit8()
help(readJPEG)
x=readJPEG(filename,native = FALSE)
x[2000,]
x[2000,,1]
ggplot(x[,,1])
ggplot2(x[,,1])
help(plot3D)
help(image2D)
install.packages(plot3D)
install.packages('plot3D')
help(plot2D)
help(image2D)
library(plot3D)
image2D(x[,,1])
help(color2D)
help(color2D)
help(color2D.matplot)
color2D.matplot
color2D.matplot(x[,,1])
image(x[,,1])
install.packages('rTools')
require(devtools)
update
help(update)
require(devtools)
find_rtools()
find_rtools()
find_rtools()
find_rtools()
> require(devtools)
require(devtools)
find_rtools()
version()
version
install.packages(c("formatR", "manipulate"))
restart
version
rtools()
find_rtools
find_rtools()
require(devtools)
find_rtools()
find_rtools()
install_github('rCharts', 'ramnathv')
load(airquality)
library(airquality)
help(airquality)
airquality
dTable(airquality, sPaginationType = "full_numbers")
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
install.packages('shiny')
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h2('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h2('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
getwd(])
getwd()
library(shiny)
setwd("D:/codes/R/DDP/color match/")
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
runApp(display.mode = 'showcase')
shinyapps::setAccountInfo(name='jasonma', token='F34F4D9FD671D0F5F9354488E1236467', secret='JD1m66vkDu9At5ZUK0j0OjmP+G6K6rgtErdWxhKt')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='jasonma', token='F34F4D9FD671D0F5F9354488E1236467', secret='JD1m66vkDu9At5ZUK0j0OjmP+G6K6rgtErdWxhKt')
library(shinyapps)
deployApp()
deployApp(appName="Gaussian matching")
deployApp(appName="GaussianMatching")
git remote add origin https://github.com/shuoxinma4/DDP.git
git push -u origin master
